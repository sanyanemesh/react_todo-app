{"version":3,"sources":["components/TodoAdd.js","components/Todo.js","components/TodoList.js","components/TodosFilter.js","components/Footer.js","App.js","index.js"],"names":["TodoAdd","state","newTodoTitle","titleError","handleNewTodoTitleChange","event","value","target","setState","handleFormSubmit","preventDefault","trim","props","updateTodosList","clearState","this","className","onSubmit","placeholder","onChange","React","Component","Todo","todo","clearTodo","handlerStatus","classNames","view","editing","edited","completed","isTodoCompleted","id","type","checked","htmlFor","title","onClick","TodoList","todos","selectAllTodos","tasks","every","map","key","TodosFilter","todosToShow","actualFilter","toggleActiveTodos","href","classnames","selected","Footer","clearCompletedTodo","filterTodos","filter","length","App","newTodo","todoId","findIndex","remainingTodos","splice","whichTodosToShow","filterName","visibleTodos","viewAllTodos","ReactDOM","render","document","getElementById"],"mappings":"wSA2EeA,E,4MAvEbC,MAAQ,CACNC,aAAc,GACdC,YAAY,G,EAGdC,yBAA2B,SAACC,GAAW,IAC7BC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CACZL,YAAY,EACZD,aAAcI,K,EAIlBG,iBAAmB,SAACJ,GAClBA,EAAMK,iBADsB,IAEpBR,EAAiB,EAAKD,MAAtBC,aAEHA,EAQuB,KAAxBA,EAAaS,QAMjB,EAAKC,MAAMC,gBAAgBX,GAC3B,EAAKY,cANH,EAAKN,SAAS,CAAEL,YAAY,IAR5B,EAAKK,SAAS,CACZL,YAAaD,K,EAgBnBY,WAAa,WACX,EAAKN,SAAS,CACZN,aAAc,M,uDAIR,IAAD,EAIHa,KAAKd,MAFPC,EAFK,EAELA,aACAC,EAHK,EAGLA,WAGF,OACE,oCACE,4BAAQa,UAAU,UAChB,wCACA,0BAAMC,SAAUF,KAAKN,kBACnB,2BACEO,UAAU,WACVE,YAAY,yBACZZ,MAAOJ,EACPiB,SAAUJ,KAAKX,2BAEhBD,S,GA5DSiB,IAAMC,W,gBCkDbC,EAjDF,SAAC,GAAD,IACXC,EADW,EACXA,KACAC,EAFW,EAEXA,UACAC,EAHW,EAGXA,cAHW,OAKX,wBAAIT,UAAWU,IAAW,CACxBC,MAAM,EACNC,QAASL,EAAKM,OACdC,UAAWP,EAAKQ,mBAGhB,yBAAKf,UAAU,QACb,2BACEgB,GAAIT,EAAKS,GACTC,KAAK,WACLjB,UAAU,SACVG,SAAU,kBAAMM,EAAcF,EAAKS,KACnCE,QAASX,EAAKQ,kBAEhB,2BACEI,QAASZ,EAAKS,IAEbT,EAAKa,OAER,4BACEH,KAAK,SACLD,GAAIT,EAAKS,GACThB,UAAU,UACVqB,QAASb,KAGb,2BACES,KAAK,OACLjB,UAAU,WCcDsB,EA/CE,SAAC,GAAD,IACfC,EADe,EACfA,MACAC,EAFe,EAEfA,eACAf,EAHe,EAGfA,cACAD,EAJe,EAIfA,UACAiB,EALe,EAKfA,MALe,OAOf,oCACE,6BAASzB,UAAU,QACjB,2BACEiB,KAAK,WACLD,GAAG,aACHhB,UAAU,aACVG,SAAUqB,EACVN,QAASK,EAAMG,OAAM,SAAAnB,GAAI,OAAIA,EAAKQ,qBAEpC,2BAAOI,QAAQ,cAAf,wBAGA,wBAAInB,UAAU,aACXyB,EAAME,KAAI,SAAApB,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNqB,IAAKrB,EAAKS,GACVR,UAAWA,EACXC,cAAeA,WCPZoB,EAlBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,kBAA9B,OAClB,4BACE,uBACEC,KAAI,YAAOF,GACX/B,UAAWkC,IAAW,CAAEC,SAAUJ,IAAiBD,IACnDT,QAAS,kBAAMW,EAAkBD,KAEhCA,KCPMK,EAAS,SAAC,GAMhB,IALLb,EAKI,EALJA,MACAc,EAII,EAJJA,mBACAP,EAGI,EAHJA,YACAE,EAEI,EAFJA,kBACAM,EACI,EADJA,YAIA,OACE,4BAAQtC,UAAU,UAChB,0BAAMA,UAAU,cACbuB,EAAMgB,QAAO,SAAAhC,GAAI,OAAKA,EAAKQ,mBAAiByB,OAC5C,IAFH,cAMA,wBAAIxC,UAAU,WAVI,CAAC,MAAO,SAAU,aAWnB2B,KAAI,SAAAY,GAAM,OACvB,kBAAC,EAAD,CACET,YAAaA,EACbF,IAAKW,EACLR,aAAcQ,EACdP,kBAAmBA,EACnBM,YAAaA,QAKnB,4BACErB,KAAK,SACLjB,UAAU,kBACVqB,QAASgB,GAHX,qBCwFSI,E,4MAnHbxD,MAAQ,CACNsC,MAAO,GACPO,YAAa,O,EAGfjC,gBAAkB,SAACX,GACjB,EAAKM,UAAS,SAACP,GACb,IAAMyD,EAAU,CACdtB,MAAOlC,EACP8B,GAAI/B,EAAMsC,MAAMiB,OAAS,EACzBzB,iBAAiB,GAGnB,MAAO,CACLQ,MAAM,GAAD,mBAAMtC,EAAMsC,OAAZ,CAAmBmB,S,EAK9BlC,UAAY,YAAiB,IAAdjB,EAAa,EAAbA,OACPoD,EAAS,EAAK1D,MAAMsC,MAAMqB,WAAU,SAAArC,GAAI,OAAIA,EAAKS,MAAQzB,EAAOyB,MAEtE,EAAKxB,UAAS,SAACP,GACb,IAAM4D,EAAc,YAAO5D,EAAMsC,OAIjC,OAFAsB,EAAeC,OAAOH,EAAQ,GAG5B,CACEpB,MAAM,YAAKsB,Q,EAMnBrB,eAAiB,YAAiB,IAAdjC,EAAa,EAAbA,OAClB,EAAKC,UAAS,SAAAP,GAAK,MAAK,CACtBsC,MAAOtC,EAAMsC,MAAMI,KAAI,SAAApB,GAAI,kCACtBA,GADsB,IAEzBQ,gBAAiBxB,EAAO2B,kB,EAK9BT,cAAgB,SAACO,GACf,EAAKxB,UAAS,SAAAP,GAAK,MAAK,CACtBsC,MAAOtC,EAAMsC,MAAMI,KAAI,SAACpB,GACtB,OAAIA,EAAKS,KAAOA,EACP,2BACFT,GADL,IAEEQ,iBAAkBR,EAAKQ,kBAIpBR,U,EAKb8B,mBAAqB,WACnB,EAAK7C,UAAS,SAAAP,GAAK,MAAK,CACtBsC,MAAOtC,EAAMsC,MAAMgB,QAAO,SAAAhC,GAAI,OAAKA,EAAKQ,wB,EAI5CuB,YAAc,SAACS,GAAsB,IAC3BxB,EAAU,EAAKtC,MAAfsC,MAER,OAAQwB,GACN,IAAK,SACH,OAAOxB,EAAMgB,QAAO,SAAAhC,GAAI,OAAKA,EAAKQ,mBACpC,IAAK,YACH,OAAOQ,EAAMgB,QAAO,SAAAhC,GAAI,OAAIA,EAAKQ,mBAEnC,QACE,OAAOQ,I,EAIbS,kBAAoB,SAACgB,GACnB,EAAKxD,SAAS,CAAEsC,YAAakB,K,uDAGrB,IAAD,EACwBjD,KAAKd,MAA5BsC,EADD,EACCA,MAAOO,EADR,EACQA,YACTmB,EAAelD,KAAKuC,YAAYR,GAEtC,OACE,6BAAS9B,UAAU,WACjB,kBAAC,EAAD,CAASH,gBAAiBE,KAAKF,kBAC/B,kBAAC,EAAD,CACE0B,MAAOA,EACPd,cAAeV,KAAKU,cACpBe,eAAgBzB,KAAKyB,eACrBhB,UAAWT,KAAKS,UAChBiB,MAAOwB,IAERlD,KAAKd,MAAMsC,MAAMiB,QAAU,GAExB,kBAAC,EAAD,CACEjB,MAAOxB,KAAKd,MAAMsC,MAClB2B,aAAcnD,KAAKmD,aACnBpB,YAAa/B,KAAK+B,YAClBE,kBAAmBjC,KAAKiC,kBACxBM,YAAavC,KAAKuC,YAClBD,mBAAoBtC,KAAKsC,0B,GA1GrBjC,IAAMC,WCCxB8C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.67216467.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoAdd extends React.Component {\n  state = {\n    newTodoTitle: '',\n    titleError: false,\n  };\n\n  handleNewTodoTitleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      titleError: false,\n      newTodoTitle: value,\n    });\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { newTodoTitle } = this.state;\n\n    if (!newTodoTitle) {\n      this.setState({\n        titleError: !newTodoTitle,\n      });\n\n      return;\n    }\n\n    if (newTodoTitle.trim() === '') {\n      this.setState({ titleError: true });\n\n      return;\n    }\n\n    this.props.updateTodosList(newTodoTitle);\n    this.clearState();\n  }\n\n  clearState = () => {\n    this.setState({\n      newTodoTitle: '',\n    });\n  };\n\n  render() {\n    const {\n      newTodoTitle,\n      titleError,\n    } = this.state;\n\n    return (\n      <>\n        <header className=\"header\">\n          <h1>ToDoList</h1>\n          <form onSubmit={this.handleFormSubmit}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newTodoTitle}\n              onChange={this.handleNewTodoTitleChange}\n            />\n            {titleError}\n          </form>\n        </header>\n      </>\n    );\n  }\n}\n\nTodoAdd.propTypes = {\n  updateTodosList: PropTypes.func.isRequired,\n};\n\nexport default TodoAdd;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Todo = ({\n  todo,\n  clearTodo,\n  handlerStatus,\n}) => (\n  <li className={classNames({\n    view: true,\n    editing: todo.edited,\n    completed: todo.isTodoCompleted,\n  })}\n  >\n    <div className=\"view\">\n      <input\n        id={todo.id}\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => handlerStatus(todo.id)}\n        checked={todo.isTodoCompleted}\n      />\n      <label\n        htmlFor={todo.id}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        id={todo.id}\n        className=\"destroy\"\n        onClick={clearTodo}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </li>\n);\n\nTodo.propTypes = {\n  clearTodo: PropTypes.func.isRequired,\n  handlerStatus: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    isTodoCompleted: PropTypes.bool,\n    edited: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({\n  todos,\n  selectAllTodos,\n  handlerStatus,\n  clearTodo,\n  tasks,\n}) => (\n  <>\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={selectAllTodos}\n        checked={todos.every(todo => todo.isTodoCompleted)}\n      />\n      <label htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n      <ul className=\"todo-list\">\n        {tasks.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n            clearTodo={clearTodo}\n            handlerStatus={handlerStatus}\n          />\n        ))}\n      </ul>\n    </section>\n  </>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    isTodoCompleted: PropTypes.bool,\n  })).isRequired,\n  selectAllTodos: PropTypes.func.isRequired,\n  handlerStatus: PropTypes.func.isRequired,\n  clearTodo: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    isTodoCompleted: PropTypes.bool,\n  })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst TodosFilter = ({ todosToShow, actualFilter, toggleActiveTodos }) => (\n  <li>\n    <a\n      href={`#/${actualFilter}`}\n      className={classnames({ selected: actualFilter === todosToShow })}\n      onClick={() => toggleActiveTodos(actualFilter)}\n    >\n      {actualFilter}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  todosToShow: propTypes.string.isRequired,\n  actualFilter: propTypes.string.isRequired,\n  toggleActiveTodos: propTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nexport const Footer = ({\n  todos,\n  clearCompletedTodo,\n  todosToShow,\n  toggleActiveTodos,\n  filterTodos,\n}) => {\n  const filteringBtns = ['all', 'active', 'completed'];\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todos.filter(todo => !todo.isTodoCompleted).length}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        {filteringBtns.map(filter => (\n          <TodosFilter\n            todosToShow={todosToShow}\n            key={filter}\n            actualFilter={filter}\n            toggleActiveTodos={toggleActiveTodos}\n            filterTodos={filterTodos}\n          />\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompletedTodo}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    isTodoCompleted: PropTypes.bool,\n  })).isRequired,\n  clearCompletedTodo: PropTypes.func.isRequired,\n  todosToShow: PropTypes.string.isRequired,\n  toggleActiveTodos: PropTypes.func.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoAdd from './components/TodoAdd';\nimport TodoList from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosToShow: 'all',\n  }\n\n  updateTodosList = (newTodoTitle) => {\n    this.setState((state) => {\n      const newTodo = {\n        title: newTodoTitle,\n        id: state.todos.length + 1,\n        isTodoCompleted: false,\n      };\n\n      return {\n        todos: [...state.todos, newTodo],\n      };\n    });\n  }\n\n  clearTodo = ({ target }) => {\n    const todoId = this.state.todos.findIndex(todo => todo.id === +target.id);\n\n    this.setState((state) => {\n      const remainingTodos = [...state.todos];\n\n      remainingTodos.splice(todoId, 1);\n\n      return (\n        {\n          todos: [...remainingTodos],\n        }\n      );\n    });\n  };\n\n  selectAllTodos = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        isTodoCompleted: target.checked,\n      })),\n    }));\n  }\n\n  handlerStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            isTodoCompleted: !todo.isTodoCompleted,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  clearCompletedTodo = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.isTodoCompleted),\n    }));\n  }\n\n  filterTodos = (whichTodosToShow) => {\n    const { todos } = this.state;\n\n    switch (whichTodosToShow) {\n      case 'active':\n        return todos.filter(todo => !todo.isTodoCompleted);\n      case 'completed':\n        return todos.filter(todo => todo.isTodoCompleted);\n\n      default:\n        return todos;\n    }\n  }\n\n  toggleActiveTodos = (filterName) => {\n    this.setState({ todosToShow: filterName });\n  }\n\n  render() {\n    const { todos, todosToShow } = this.state;\n    const visibleTodos = this.filterTodos(todosToShow);\n\n    return (\n      <section className=\"todoapp\">\n        <TodoAdd updateTodosList={this.updateTodosList} />\n        <TodoList\n          todos={todos}\n          handlerStatus={this.handlerStatus}\n          selectAllTodos={this.selectAllTodos}\n          clearTodo={this.clearTodo}\n          tasks={visibleTodos}\n        />\n        {this.state.todos.length >= 1\n          && (\n            <Footer\n              todos={this.state.todos}\n              viewAllTodos={this.viewAllTodos}\n              todosToShow={this.todosToShow}\n              toggleActiveTodos={this.toggleActiveTodos}\n              filterTodos={this.filterTodos}\n              clearCompletedTodo={this.clearCompletedTodo}\n            />\n          )\n        }\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}